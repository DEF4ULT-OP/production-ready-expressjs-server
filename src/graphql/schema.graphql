type Query {
    users(query: String): [User!]!
    me: User!
}

type Mutation {
    signUp(data: signUpInput!): AuthPayload
    login(data: loginUpInput!): AuthPayload
    updateUser(id: ID!, data: UpdateUserInput!): User!
    deleteUser(id: ID!): User!
}

input signUpInput {
    name: String!
    email: String!
    password: String!
}

input loginUpInput {
    name: String!
    email: String!
}

input UpdateUserInput {
    name: String
    email: String
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
}

type Subscription {
    userCreated: UserSubscriptionPayload
    userUpdated(userId: ID!): UserSubscriptionPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type UserSubscriptionPayload {
    mutation: MutationType!
    node: User!
}
