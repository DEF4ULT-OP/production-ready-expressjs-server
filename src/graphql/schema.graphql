type Query {
    users(query: String): [User!]!
    me: User!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    deleteUser(id: ID!): User!
    createVerificationToken(userId: String!): VerificationToken!
    verifyEmail(token: String!): User!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
}

type User {
    id: ID!
    name: String!
    email: String,
    emailVerified: Boolean!
}

type VerificationToken {
    id: ID!
    userId: String
    token: String!
    createdAt: String!
}

type Subscription {
    userCreated: UserSubscriptionPayload
    userUpdated(userId: ID!): UserSubscriptionPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type UserSubscriptionPayload {
    mutation: MutationType!
    node: User!
}
